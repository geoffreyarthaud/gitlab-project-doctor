name: ci
on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '00 01 * * *'
jobs:
  test:
    name: test
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - stable
          - beta
          - nightly
          - macos
          - windows
        include:
          - build: stable
            os: ubuntu-20.04
            rust: stable
          - build: beta
            os: ubuntu-20.04
            rust: beta
          - build: nightly
            os: ubuntu-20.04
            rust: nightly
          - build: macos
            os: macos-latest
            rust: nightly
          - build: windows
            os: windows-2019
            rust: nightly
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install OpenSSL
        if: matrix.os == 'windows-2019'
        run: |
          choco install openssl
          echo ("OPENSSL_DIR=C:\Program Files\OpenSSL-Win64") >> $env:GITHUB_ENV
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Build gitlab-project-doctor and all crates
        run: cargo build --verbose

      # This is useful for debugging problems when the expected build artifacts
      # (like shell completions and man pages) aren't generated.
      - name: Show build.rs stderr
        shell: bash
        run: |
          set +x
          stderr="$(find "target/debug" -name stderr -print0 | xargs -0 ls -t | head -n1)"
          if [ -s "$stderr" ]; then
            echo "===== $stderr ===== "
            cat "$stderr"
            echo "====="
          fi
          set -x

      - name: Run tests
        run: cargo test --verbose

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - name: Check formatting
        run: |
          cargo fmt --all -- --check

  docs:
    name: Docs
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items --workspace
